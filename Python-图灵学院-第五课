while循环
一个循环语句
便是当某条件成立的时候，就循环
不知道具体循环次数，但能确定循环的成立条件的时候用while循环
while语法：
while 条件表达式：
    语句块

#另外一种表达方法
while 条件表达式：
    语句块1
else：
    语句块2
In [4]:

# 如果说年利率是6.7%，本利是每年翻滚，则多少年后本钱会翻倍
benqian = 100000
year = 0
while benqian < 200000:
    benqian = benqian*(1+0.067)
    year += 1    # year = year + 1
    print("第{0}年拿了{1}块钱".format(year,benqian))
第1年拿了106700.0块钱
第2年拿了113848.9块钱
第3年拿了121476.77629999998块钱
第4年拿了129615.72031209998块钱
第5年拿了138299.97357301068块钱
第6年拿了147566.07180240238块钱
第7年拿了157452.99861316333块钱
第8年拿了168002.34952024528块钱
第9年拿了179258.5069381017块钱
第10年拿了191268.8269029545块钱
第11年拿了204083.83830545243块钱
In [8]:

# 如果说年利率是6.7%，本利是每年翻滚，则多少年后本钱会翻倍
#如果拿到的钱翻倍，则用print庆祝一下
benqian = 100000
year = 0
while benqian < 200000:
    benqian = benqian*(1+0.067)
    year += 1    # year = year + 1
    print("第{0}年拿了{1}块钱".format(year,benqian))
else:
    print("终于翻倍了，不容易啊")
    print("太漫长啦！")
第1年拿了106700.0块钱
第2年拿了113848.9块钱
第3年拿了121476.77629999998块钱
第4年拿了129615.72031209998块钱
第5年拿了138299.97357301068块钱
第6年拿了147566.07180240238块钱
第7年拿了157452.99861316333块钱
第8年拿了168002.34952024528块钱
第9年拿了179258.5069381017块钱
第10年拿了191268.8269029545块钱
第11年拿了204083.83830545243块钱
终于翻倍了，不容易啊
太漫长啦！
函数
代码的一种组织形式
一个函数一般般完成一项特定的功能
函数使用
函数需要先定义
使用函数，俗称调用
In [9]:

# 定义一个函数
# 只是顶你个一的话不会执行
# 1. def 关键字，后跟一个空格
# 2. 函数名称，自己定义，起名需要遵循便令命名规则，约定俗称，大驼峰命名只给类用
# 3. 后面括号和冒号不能省略，括号内可以由参数
# 4。 函数内所有代码缩进
def func():
    print("我是一个函数")
    print("我要完成一定功能")
    print("我结束了")
In [11]:

# 函数调用
# 直接函数名字后面跟括号
func()
我是一个函数
我要完成一定功能
我结束了
函数的参数和返回值
参数：负责给函数传递一些必要的数据或者信息
形参 （形式参数）：在函数定义的时候用到的参数没有具体值，只是一个占位符号，成为形参
实参 （实际参数）：在调用函数的时候输入的值
返回值：函数的执行结果
使用return关键字
如果没有return，默认返回一个None
函数一单执行return语句，则无条件返回，即结束函数执行
In [14]:

# 参数的定义和使用
# 参数person只是一个符号，代表的是调用的时候的某一个数据
# 调用的时候，会用p的值代替函数中所有的person
​
def hello(person):
    print("{0},你好！".format(person))
    print("Sir,你好")

p = "Alan"
hello(p)
# p 代替了 person这个变量，打印的时候会直接打印p
Alan,你好！
Sir,你好
In [16]:

# return语句的基本使用
# 函数打完招呼后返回一句话
def hello(person):
    print("{0},你好！".format(person))
    print("Sir,你好")

    return "我已经跟{0}打招呼了，{1}不理我".format(person,person)
​
p = "Alan"
rst = hello(p)
​
print(rst)
Alan,你好！
Sir,你好
我已经跟Alan打招呼了，Alan不理我
In [24]:

# return案例2
def hello(person):
    print("{0},你好！".format(person))
    return "哈哈，我提前结束了"
​
    print("Sir,你好")

    return "我已经跟{0}打招呼了，{1}不理我".format(person,person)
p = "Alan"
rst = hello(p)
​
print(rst)
Alan,你好！
哈哈，我提前结束了
In [26]:

# 查找函数帮助文档
# 1.用help函数
help(print)
Help on built-in function print in module builtins:

print(...)
    print(value, ..., sep=' ', end='\n', file=sys.stdout, flush=False)

    Prints the values to a stream, or to sys.stdout by default.
    Optional keyword arguments:
    file:  a file-like object (stream); defaults to the current sys.stdout.
    sep:   string inserted between values, default a space.
    end:   string appended after the last value, default a newline.
    flush: whether to forcibly flush the stream.

In [5]:

# 九九乘法表
​
for row in range(1,10):
    # 打印一行
    for col in range(1,row+1):
        print("%d*%d=%2d"%(row,col,row*col),end=" ")
    print("---------------")
1*1= 1 ---------------
2*1= 2 2*2= 4 ---------------
3*1= 3 3*2= 6 3*3= 9 ---------------
4*1= 4 4*2= 8 4*3=12 4*4=16 ---------------
5*1= 5 5*2=10 5*3=15 5*4=20 5*5=25 ---------------
6*1= 6 6*2=12 6*3=18 6*4=24 6*5=30 6*6=36 ---------------
7*1= 7 7*2=14 7*3=21 7*4=28 7*5=35 7*6=42 7*7=49 ---------------
8*1= 8 8*2=16 8*3=24 8*4=32 8*5=40 8*6=48 8*7=56 8*8=64 ---------------
9*1= 9 9*2=18 9*3=27 9*4=36 9*5=45 9*6=54 9*7=63 9*8=72 9*9=81 ---------------
In [13]:

def printline(row):

    for col in range(1,row+1):

        print("%d*%d=%2d"%(row,col,row*col),end=" ")
    print(" ")
​
​
# 九九乘法表
# version 1.0
for row in range(1,10):
    printline(row)
1*1= 1
2*1= 2 2*2= 4
3*1= 3 3*2= 6 3*3= 9
4*1= 4 4*2= 8 4*3=12 4*4=16
5*1= 5 5*2=10 5*3=15 5*4=20 5*5=25
6*1= 6 6*2=12 6*3=18 6*4=24 6*5=30 6*6=36
7*1= 7 7*2=14 7*3=21 7*4=28 7*5=35 7*6=42 7*7=49
8*1= 8 8*2=16 8*3=24 8*4=32 8*5=40 8*6=48 8*7=56 8*8=64
9*1= 9 9*2=18 9*3=27 9*4=36 9*5=45 9*6=54 9*7=63 9*8=72 9*9=81
参数详解
参考资料
python参考资料：headfirst python -> 零基础入门学习python（小甲鱼）-->习题-->后期可以考虑腾讯公开免费课
参数分类
普通参数
默认参数
关键字参数
收集参数
普通参数
参见上例
定义的时候直接定义变量名
调用的时候直接把变量或者值放入指定位置
  def 函数名（形参数1，形参数2，.......）
      函数体

  # 调用
  函数名(实参1，实参2，.....)

  # 调用的时候，具体值参考的位置，按位置赋值
默认参数
形参带有默认值
调用的时候，如果没有对相应参数值，则使用默认值
  def name（pv=v1,p2=v2......）
      block
  # 调用1
  name()  #直接默认上面参数使用

  #调用2
  a = 100
  b = 100
  name(a,b)
  按实参参数
In [20]:

# 默认参数示例
# 报名函数，需要知道学生性别
# 指定男生
def reg(name,age,gender="male"):
    if gender == "男":
        print("{0} is {1}, and he is a good student".format(name,age))
    else:
        print("{0} is {1}, and she is a good student".format(name,age))

reg("Alan", 30,"男")
reg("Alan", 30,"女")
Alan is 30, and he is a good student
Alan is 30, and she is a good student
